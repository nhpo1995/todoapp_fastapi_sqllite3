import subprocess
import re
import time
import sys
from typing import List, Tuple


def get_processes_on_port(port: int) -> List[Tuple[int, str]]:
    """L·∫•y danh s√°ch c√°c process ƒëang s·ª≠ d·ª•ng port c·ª• th·ªÉ"""
    try:
        # S·ª≠ d·ª•ng netstat ƒë·ªÉ t√¨m process tr√™n port
        result = subprocess.run(
            ["netstat", "-ano"], capture_output=True, text=True, shell=True
        )

        processes = []
        for line in result.stdout.split("\n"):
            if f":{port}" in line and "LISTENING" in line:
                # Parse d√≤ng netstat ƒë·ªÉ l·∫•y PID
                parts = line.split()
                if len(parts) >= 5:
                    pid = parts[-1]
                    try:
                        pid_int = int(pid)
                        # L·∫•y t√™n process
                        process_name = get_process_name(pid_int)
                        processes.append((pid_int, process_name))
                    except ValueError:
                        continue

        return processes
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra port {port}: {e}")
        return []


def get_process_name(pid: int) -> str:
    """L·∫•y t√™n c·ªßa process t·ª´ PID"""
    try:
        result = subprocess.run(
            ["tasklist", "/FI", f"PID eq {pid}", "/FO", "CSV"],
            capture_output=True,
            text=True,
            shell=True,
        )

        lines = result.stdout.split("\n")
        if len(lines) >= 2:
            # Parse CSV format ƒë·ªÉ l·∫•y t√™n process
            parts = lines[1].split(",")
            if len(parts) >= 2:
                return parts[1].strip('"')

        return f"PID {pid}"
    except:
        return f"PID {pid}"


def kill_process(pid: int) -> bool:
    """Kill process v·ªõi PID c·ª• th·ªÉ"""
    try:
        result = subprocess.run(
            ["taskkill", "/PID", str(pid), "/F"],
            capture_output=True,
            text=True,
            shell=True,
        )

        if result.returncode == 0:
            return True
        else:
            print(f"Kh√¥ng th·ªÉ kill process {pid}: {result.stderr}")
            return False
    except Exception as e:
        print(f"L·ªói khi kill process {pid}: {e}")
        return False


def cleanup_port(port: int, force: bool = False) -> bool:
    """D·ªçn d·∫πp port c·ª• th·ªÉ"""
    print(f"\nüîç ƒêang ki·ªÉm tra port {port}...")

    processes = get_processes_on_port(port)

    if not processes:
        print(f"‚úÖ Port {port} kh√¥ng c√≥ process n√†o ƒëang s·ª≠ d·ª•ng")
        return True

    print(f"‚ö†Ô∏è  T√¨m th·∫•y {len(processes)} process tr√™n port {port}:")

    for pid, name in processes:
        print(f"   - PID {pid}: {name}")

    if not force:
        response = input(
            f"\n‚ùì B·∫°n c√≥ mu·ªën kill t·∫•t c·∫£ process tr√™n port {port}? (y/N): "
        )
        if response.lower() not in ["y", "yes"]:
            print("‚ùå H·ªßy b·ªè")
            return False

    print(f"\nüóëÔ∏è  ƒêang kill c√°c process tr√™n port {port}...")

    success_count = 0
    for pid, name in processes:
        if kill_process(pid):
            print(f"   ‚úÖ ƒê√£ kill {name} (PID {pid})")
            success_count += 1
        else:
            print(f"   ‚ùå Kh√¥ng th·ªÉ kill {name} (PID {pid})")

    if success_count == len(processes):
        print(f"‚úÖ ƒê√£ d·ªçn d·∫πp xong port {port}")
        return True
    else:
        print(f"‚ö†Ô∏è  Ch·ªâ d·ªçn d·∫πp ƒë∆∞·ª£c {success_count}/{len(processes)} process")
        return False


def cleanup_common_ports():
    """D·ªçn d·∫πp c√°c port th∆∞·ªùng d√πng"""
    common_ports = [8000, 3000, 5000, 8080, 4000, 6000, 7000, 9000]

    print("üöÄ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp c√°c port th∆∞·ªùng d√πng...")

    for port in common_ports:
        cleanup_port(port, force=False)
        time.sleep(1)  # ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c port


def main():
    """H√†m ch√≠nh"""
    print("üßπ PORT CLEANUP SCRIPT")
    print("=" * 50)

    if len(sys.argv) > 1:
        # N·∫øu c√≥ argument, d·ªçn d·∫πp port c·ª• th·ªÉ
        try:
            port = int(sys.argv[1])
            cleanup_port(port, force=False)
        except ValueError:
            print("‚ùå Port ph·∫£i l√† s·ªë nguy√™n")
            print("C√°ch s·ª≠ d·ª•ng: python cleanup_ports.py [port_number]")
    else:
        # N·∫øu kh√¥ng c√≥ argument, d·ªçn d·∫πp c√°c port th∆∞·ªùng d√πng
        cleanup_common_ports()

    print("\nüéâ Ho√†n th√†nh!")


if __name__ == "__main__":
    main()
